#include <gtest/gtest.h>
#include "test_push_swap.hpp"
#include <iostream>

////////////////////////////////////////////////////////////////////////////////////////////////////
// insert sort
////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
// find least amount of operations

struct LeastAmountOfOperationTestParam {
    std::vector<int> stack_a;
    std::vector<int> stack_b;
	int idx;
	int want;
    int size_a;
    int size_b;
    int max_b;
	int min_b;
};

class LeastAmountTest : public testing::TestWithParam<LeastAmountOfOperationTestParam> {};

TEST_P(LeastAmountTest, LeastAmountTest) {
    LeastAmountOfOperationTestParam param = GetParam();

    t_state state = {create_stack(param.stack_a), create_stack(param.stack_b), param.size_a, param.size_b, param.max_b, param.min_b};

    testing::internal::CaptureStdout();
    int got = get_amount_ops(state, param.idx);
	testing::internal::GetCapturedStdout();

	EXPECT_EQ(got, param.want);

    ft_lstclear(&state.a,free);
    ft_lstclear(&state.b,free);
}

INSTANTIATE_TEST_SUITE_P(
    LeastAmountTests,
    LeastAmountTest,
    ::testing::Values(
        LeastAmountOfOperationTestParam{{3}, {1, 2}, 0, 2, 1, 2, 2, 1},
        LeastAmountOfOperationTestParam{{3}, {2, 1}, 0, 1, 1, 2, 2, 1},
        LeastAmountOfOperationTestParam{{3}, {1, 0}, 0, 1, 1, 2, 1, 0},
        LeastAmountOfOperationTestParam{{3}, {2, 1, 6}, 0, 1, 1, 3, 6, 1},
        LeastAmountOfOperationTestParam{{4}, {2, 1}, 0, 1, 1, 2, 2, 1},
        LeastAmountOfOperationTestParam{{2}, {1, 3}, 0, 1, 1, 2, 3, 1},
        LeastAmountOfOperationTestParam{{2}, {4, 3, 1, 5}, 0, 3, 1, 4, 4, 1},
        LeastAmountOfOperationTestParam{{2}, {5, 4, 3, 1, 6}, 0, 3, 1, 5, 4, 1},
        LeastAmountOfOperationTestParam{{0, 2}, {5, 4, 3, 1, 6}, 1, 4, 2, 5, 4, 1},
        LeastAmountOfOperationTestParam{{0, 0, 0, 0 ,2, 0}, {5, 4, 3, 1, 6}, 4, 5, 6, 5, 4, 1},
        LeastAmountOfOperationTestParam{{0, 0, 0, 0 ,2, 0}, {3, 1, 6, 5, 4, }, 4, 4, 6, 5, 4, 1},
        LeastAmountOfOperationTestParam{{4,7,-1, 10, 2}, {6, 3, 1, -2, 9}, 0, 2, 5, 5, 9, -2},
        LeastAmountOfOperationTestParam{{4,7,-1, 10, 2}, {6, 3, 1, -2, 9}, 1, 2, 5, 5, 9, -2},
        LeastAmountOfOperationTestParam{{4,7,-1, 10, 2}, {6, 3, 1, -2, 9}, 2, 5, 5, 5, 9, -2},
        LeastAmountOfOperationTestParam{{4,7,-1, 10, 2}, {6, 3, 1, -2, 9}, 3, 4, 5, 5, 9, -2},
        LeastAmountOfOperationTestParam{{4,7,-1, 10, 2}, {6, 3, 1, -2, 9}, 4, 3, 4, 5, 9, -2},
        LeastAmountOfOperationTestParam{{4,7,-1, 10, 2}, {6, 3, 1, -2, 12, 9}, 2, 6, 5, 6, 12, -2},
        LeastAmountOfOperationTestParam{{1}, {2, 3}, 0, 2, 1, 2, 3, 2},
        LeastAmountOfOperationTestParam{{1}, {4, 3, 2, 7, 6, 5}, 0, 4, 1, 6, 7, 2},
        LeastAmountOfOperationTestParam{{1}, {6, 5, 4, 3, 2, 7}, 0, 2, 1, 6, 7, 2},
        LeastAmountOfOperationTestParam{{0, 3, 7}, {6, 5, 4, 2, 1, -2, -5}, 2, 2, 3, 7, 6, -5}
		)
	);

////////////////////////////////////////////////////////////////////////////////////////////////////
// insert new value


struct InsertNewValTestParams {
    std::vector<int> stack_a;
    std::vector<int> stack_b;
    std::vector<int> want_stack;
	int want_nbr_ops;
};

class InsertNewValTest : public testing::TestWithParam<InsertNewValTestParams> {};

TEST_P(InsertNewValTest, InsertNewValTest) {
    InsertNewValTestParams param = GetParam();

    t_stack *want_stack = create_stack(param.want_stack);
    t_state state = {create_stack(param.stack_a), create_stack(param.stack_b),  (int)param.stack_a.size(), (int)param.stack_b.size(), 0, 0};

    testing::internal::CaptureStdout();
    state = insert_new_val(state);
    std::string output = testing::internal::GetCapturedStdout();
	// std::cout << output;

	int got_nbr_ops = countNewlines(output);

    assert_equal_stack(state.b, want_stack);
	EXPECT_EQ(got_nbr_ops, param.want_nbr_ops);

    ft_lstclear(&state.a,free);
    ft_lstclear(&state.b,free);
    ft_lstclear(&want_stack,free);
}

INSTANTIATE_TEST_SUITE_P(
    InsertNewValTest,
    InsertNewValTest,
    ::testing::Values(
        InsertNewValTestParams{{3}, {2, 1}, {3, 2, 1}, 1},
        InsertNewValTestParams{{3}, {6, 5, 4, 2, 1}, {3, 2, 1, 6, 5, 4}, 3},
        InsertNewValTestParams{{3, 7}, {6, 5, 4, 2, 1}, {7, 6, 5, 4, 2, 1}, 2},
        InsertNewValTestParams{{0, 3, 7}, {6, 5, 4, 2, 1, -2, -5}, {7, 6, 5, 4, 2, 1, -2, -5}, 2}
		)
	);

////////////////////////////////////////////////////////////////////////////////////////////////////
// insert sort algorithm


struct InsertSortTestParam {
    std::vector<int> stack_a;
    std::vector<int> want_stack;
};

class InsertSortTest : public testing::TestWithParam<InsertSortTestParam> {};

TEST_P(InsertSortTest, InsertSortTest) {
    InsertSortTestParam param = GetParam();

    t_stack *want_stack = create_stack(param.want_stack);
    t_state state = {create_stack(param.stack_a), NULL,  (int)param.stack_a.size(), 0, 0, 0};

    testing::internal::CaptureStdout();
    state = insert_sort(state);

    std::string output = testing::internal::GetCapturedStdout();
	int got_nbr_ops = countNewlines(output);
	std::cout << got_nbr_ops;

    assert_equal_stack(state.a, want_stack);

    ft_lstclear(&state.a,free);
    ft_lstclear(&state.b,free);
    ft_lstclear(&want_stack,free);
}

INSTANTIATE_TEST_SUITE_P(
    InsertSortTests,
    InsertSortTest,
    ::testing::Values(
        InsertSortTestParam{{}, {}},
        InsertSortTestParam{{1}, {1}},
        InsertSortTestParam{{2, 1}, {1, 2}},
        InsertSortTestParam{{1, 2, 3}, {1, 2, 3}},
        InsertSortTestParam{{2, 1, 3}, {1, 2, 3}},
        InsertSortTestParam{{3, 2, 1}, {1, 2, 3}},
        InsertSortTestParam{{1, 3, 2}, {1, 2, 3}},
        InsertSortTestParam{{2, 3, 1}, {1, 2, 3}},
        InsertSortTestParam{{3, 1, 2}, {1, 2, 3}},
        InsertSortTestParam{{4, 2, 3, 1}, {1, 2, 3,4}},
        InsertSortTestParam{{4, 3, 2, 1}, {1, 2, 3,4}},
        InsertSortTestParam{{5, 2, 4, 1, 3}, {1, 2, 3,4, 5}},
		InsertSortTestParam{{87, 2, 74, 83, 35, 1, 64, 39, 31, 20, 22, 17, 85, 15, 49, 67, 27, 8, 63, 4, 16, 47, 81, 7, 61, 50, 82, 70, 72, 92, 80, 45, 44, 88, 54, 13, 19, 33, 99, 30, 69, 96, 14, 3, 89, 10, 5, 76, 90, 6, 62, 41, 37, 66, 79, 32, 97, 98, 18, 23, 94, 73, 75, 9, 68, 86, 53, 51, 38, 12, 48, 57, 91, 21, 52, 56, 58, 11, 60, 24, 46, 34, 43, 71, 36, 93, 59, 28, 78, 55, 40, 100, 95, 77, 25, 65, 42, 26, 29, 84}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}}
		// InsertSortTestParam{{167, 151, 291, 23, 474, 278, 377, 346, 361, 64, 16, 350, 229, 12, 298, 486, 494, 21, 353, 386, 170, 98, 99, 35, 437, 94, 117, 351, 252, 4, 112, 141, 289, 325, 79, 373, 185, 442, 86, 118, 8, 126, 393, 334, 323, 258, 242, 95, 391, 260, 107, 473, 392, 404, 341, 54, 31, 416, 156, 358, 309, 56, 115, 410, 132, 22, 113, 230, 222, 245, 202, 67, 413, 171, 9, 231, 225, 127, 500, 263, 261, 207, 370, 1, 93, 198, 412, 169, 475, 42, 249, 262, 52, 457, 327, 284, 205, 374, 281, 407, 234, 50, 383, 61, 283, 293, 203, 240, 70, 310, 157, 418, 241, 120, 333, 71, 300, 481, 40, 196, 479, 440, 17, 216, 292, 287, 463, 360, 464, 150, 420, 332, 303, 286, 25, 265, 58, 90, 340, 299, 294, 137, 304, 438, 135, 272, 466, 349, 172, 268, 44, 153, 53, 367, 130, 359, 221, 389, 398, 493, 227, 226, 81, 143, 109, 467, 403, 314, 63, 128, 48, 441, 338, 285, 189, 305, 238, 415, 352, 439, 384, 257, 102, 20, 317, 144, 166, 425, 378, 45, 68, 91, 276, 301, 220, 451, 328, 426, 336, 405, 280, 96, 80, 468, 296, 125, 162, 184, 246, 84, 41, 318, 379, 329, 454, 103, 476, 85, 182, 209, 313, 218, 330, 487, 73, 7, 456, 444, 155, 269, 471, 356, 306, 484, 488, 87, 411, 55, 452, 175, 77, 402, 223, 159, 256, 354, 387, 267, 335, 59, 46, 224, 179, 168, 279, 163, 160, 206, 106, 417, 100, 498, 432, 244, 434, 482, 363, 214, 177, 197, 465, 251, 311, 255, 433, 215, 288, 239, 368, 248, 497, 204, 6, 371, 208, 219, 88, 134, 161, 390, 149, 142, 131, 319, 133, 5, 362, 290, 89, 211, 274, 104, 388, 429, 496, 446, 431, 235, 188, 381, 154, 65, 2, 140, 348, 199, 422, 232, 193, 28, 421, 302, 344, 430, 369, 326, 271, 124, 19, 357, 365, 57, 47, 450, 477, 419, 36, 62, 275, 195, 180, 72, 111, 308, 183, 13, 233, 455, 217, 200, 321, 461, 165, 14, 480, 491, 78, 366, 492, 345, 66, 277, 60, 194, 123, 436, 38, 385, 273, 423, 243, 266, 51, 164, 453, 320, 26, 101, 315, 76, 459, 32, 406, 187, 138, 445, 380, 324, 270, 27, 173, 343, 307, 105, 83, 376, 264, 337, 339, 176, 145, 74, 10, 382, 460, 322, 114, 97, 312, 15, 121, 427, 458, 110, 297, 355, 414, 247, 136, 148, 435, 478, 3, 49, 372, 186, 210, 201, 82, 236, 316, 447, 331, 395, 254, 499, 108, 394, 147, 116, 213, 212, 469, 470, 122, 43, 11, 192, 29, 448, 259, 495, 190, 295, 250, 399, 375, 396, 37, 364, 397, 119, 158, 449, 92, 129, 152, 181, 139, 75, 462, 489, 483, 424, 228, 485, 408, 69, 347, 490, 146, 24, 342, 33, 253, 400, 34, 30, 39, 472, 191, 282, 178, 401, 18, 443, 174, 428, 409, 237}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500}}
		// InsertSortTestParam{{309, 464, 363, 239, 77, 240, 131, 367, 492, 186, 455, 391, 351, 450, 393, 251, 394, 487, 126, 297, 220, 342, 84, 73, 313, 420, 379, 67, 68, 64, 76, 374, 427, 5, 335, 235, 295, 481, 287, 470, 241, 460, 345, 336, 157, 224, 257, 218, 387, 471, 361, 284, 100, 86, 412, 177, 88, 258, 256, 78, 122, 316, 368, 114, 410, 291, 72, 171, 426, 151, 136, 225, 314, 168, 38, 166, 366, 267, 103, 22, 173, 205, 322, 7, 36, 59, 158, 344, 104, 197, 388, 431, 145, 13, 249, 147, 485, 19, 402, 408, 457, 207, 330, 469, 184, 155, 468, 369, 172, 29, 21, 312, 484, 44, 45, 489, 288, 92, 320, 269, 435, 401, 453, 491, 65, 161, 341, 364, 298, 319, 178, 449, 165, 315, 201, 353, 227, 372, 418, 274, 139, 54, 128, 112, 399, 174, 60, 217, 119, 118, 99, 281, 135, 116, 214, 89, 380, 422, 283, 188, 192, 75, 311, 185, 475, 340, 70, 28, 456, 200, 466, 140, 278, 465, 331, 223, 488, 376, 452, 150, 349, 248, 300, 436, 442, 424, 221, 373, 434, 343, 230, 175, 441, 25, 329, 222, 270, 352, 169, 182, 273, 82, 216, 198, 149, 194, 377, 354, 167, 111, 10, 56, 432, 305, 428, 94, 134, 296, 423, 154, 123, 293, 105, 407, 164, 333, 371, 327, 289, 90, 191, 162, 196, 229, 473, 148, 27, 228, 101, 497, 232, 389, 176, 212, 193, 477, 87, 286, 472, 348, 292, 282, 69, 486, 97, 12, 137, 498, 33, 163, 496, 338, 370, 337, 125, 49, 375, 479, 448, 360, 304, 47, 46, 98, 417, 272, 102, 276, 238, 85, 55, 53, 30, 332, 215, 91, 495, 141, 170, 203, 233, 31, 108, 8, 133, 142, 409, 395, 398, 346, 124, 306, 277, 476, 334, 339, 382, 392, 4, 43, 260, 250, 461, 210, 62, 23, 63, 310, 482, 365, 160, 16, 280, 444, 275, 326, 265, 209, 24, 204, 48, 324, 383, 244, 447, 231, 50, 183, 127, 362, 454, 32, 478, 446, 254, 152, 37, 440, 378, 307, 385, 106, 51, 74, 242, 40, 443, 213, 143, 406, 3, 400, 419, 71, 413, 121, 467, 384, 415, 219, 189, 42, 113, 206, 271, 190, 480, 179, 15, 323, 405, 83, 411, 57, 226, 290, 95, 490, 445, 359, 416, 403, 41, 81, 153, 14, 356, 107, 237, 159, 494, 146, 264, 156, 34, 18, 1, 381, 11, 321, 6, 397, 350, 252, 299, 58, 243, 355, 96, 483, 20, 357, 263, 181, 17, 195, 308, 396, 255, 262, 199, 500, 187, 130, 325, 261, 302, 202, 117, 26, 129, 138, 474, 439, 80, 115, 414, 301, 247, 438, 208, 266, 459, 211, 245, 358, 386, 347, 303, 93, 318, 253, 462, 246, 404, 279, 463, 236, 35, 294, 66, 110, 52, 61, 451, 458, 132, 429, 144, 79, 39, 437, 328, 421, 317, 120, 109, 2, 180, 499, 259, 9, 268, 493, 390, 285, 430, 234, 433, 425}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500}}
		)
	);
